// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BannedType {
  VIOLATION
  QUIZ
}

enum UserRole {
  USER
  SUPER_ADMIN
  ADMIN
}

model User {
  id                String      @id @default(uuid())
  fullname          String
  username          String      @unique
  email             String      @unique
  password          String      @default("")
  photo             String      @default("")
  role              UserRole    @default(USER)
  is_email_verified Boolean     @default(false)
  token             String      @unique
  provider          String      @default("email")
  is_banned         Boolean     @default(false)
  banned_until      DateTime?
  banned_type       BannedType?

  forums     Forum[]
  members    Member[]
  violations Violation[]
  validate   Validate?
  answers    Answer[]
}

model Validate {
  id              String   @id @default(uuid())
  user_id         String   @unique
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role            String?
  file            String?
  photo           String?
  note            String?  @db.Text
  url_quiz_record String?
  is_valid        Boolean  @default(false)
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Forum {
  id          String @id @default(uuid())
  title       String @unique
  description String @db.Text
  invite_code String @unique

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  members  Member[]
  reports  Report[]
  messages Message[]
  media    Media?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  forum_id String
  forum    Forum  @relation(fields: [forum_id], references: [id], onDelete: Cascade)

  reports  Report[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  media      Media?

  @@index([user_id])
  @@index([forum_id])
}

enum ReportCategory {
  POST_PERSONAL_INFORMATION
  ONLINE_HARASSMENT
  HATEFUL_BEHAVIOR
  THREAT_OF_VIOLENCE
  SELF_HARM
  SPAM
}

model Report {
  id              String         @id @default(uuid())
  report_category ReportCategory

  member_id String
  member    Member @relation(fields: [member_id], references: [id], onDelete: Cascade)

  forum_id String
  forum    Forum  @relation(fields: [forum_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([member_id])
  @@index([forum_id])
}

model Message {
  id         String  @id @default(uuid())
  content    String  @db.Text
  file_url   String  @default("")
  is_deleted Boolean @default(false)

  member_id String
  member    Member @relation(fields: [member_id], references: [id], onDelete: Cascade)

  forum_id String
  forum    Forum  @relation(fields: [forum_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([member_id])
  @@index([forum_id])
}

model Media {
  id         String  @id @default(uuid())
  is_enabled Boolean @default(false)
  type       String

  member_id String @unique
  member    Member @relation(fields: [member_id], references: [id], onDelete: Cascade)

  forum_id String @unique
  forum    Forum  @relation(fields: [forum_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([member_id])
  @@index([forum_id])
}

model Violation {
  id              String   @id @default(uuid())
  user_id         String   @unique
  violation_count Int      @default(0)
  last_violation  DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum QuestionType {
  TEXT
  RADIO
  CHECKBOX
}

model Question {
  id              String       @id @default(uuid())
  text            String       @db.Text
  type            QuestionType
  options         Json
  correct_answers Json
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  answers Answer[]
}

model Answer {
  id         String  @id @default(uuid())
  answer     Json
  is_correct Boolean @default(false)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  question_id String
  question    Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
}

model Lecture {
  id   String @id @default(uuid())
  name String

  course_lectures CourseLecture[]
}

model Course {
  id   String @id @default(uuid())
  name String

  course_lectures CourseLecture[]
}

model CourseLecture {
  id         String @id @default(uuid())
  course_id  String
  lecture_id String

  course  Course  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lecture Lecture @relation(fields: [lecture_id], references: [id], onDelete: Cascade)
}
